// 寄存器个数
#REGISTER
//32bit,	64bit,	128bit,	256bit,
  64,		8,		12,		0,

// 自增寄存器
#INC-REGS
 39, 40, 41, 42, 43, 44,

// 寄存器映射
#REG-MAP
//name,		mapTo
r88,		r72 0+32,
r89,		r72 32+32,
r90,		r72 64+32,

r96,		r64 0+32,
r97,		r64 32+32,
r98,		r65 0+32,
r99,		r65 32+32,
r100,		r66 0+32,
r101,		r66 32+32,
r102,		r67 0+32,
r103,		r67 32+32,
r104,		r68 0+32,
r105,		r68 32+32,
r106,		r69 0+32,
r107,		r69 32+32,
r108,		r70 0+32,
r109,		r70 32+32,
r110,		r71 0+32,
r111,		r71 32+32,

r112,		r76 0+32,
r113,		r76 32+32,
r114,		r76 64+32,
r115,		r76 96+32,
r116,		r77 0+32,
r117,		r77 32+32,
r118,		r77 64+32,
r119,		r77 96+32,
r120,		r78 0+32,
r121,		r78 32+32,
r122,		r78 64+32,
r123,		r78 96+32,
r124,		r79 0+32,
r125,		r79 32+32,
r126,		r79 64+32,
r127,		r79 96+32,

// 寄存器别名
#REG-ALIAS
//alias,	register,
ptr0,		r39,
ptr1,		r40,
ptr2,		r41,
ptr3,		r42,
ptr4,		r43,
ptr5,		r44,
rv,			r45,
rj,	     	r46,
cr,			r47,
iv0,		r48,
iv1,		r49,
iv2,		r50,
iv3,		r51,
iv4,		r52,
iv5,		r53,
iv6,		r54,
iv7,		r55,
iv8,		r56,
iv9,		r57,
iv10,		r58,
iv11,		r59,
iv12,		r60,
sp,			r61,
irp,		r62,
rp,			r63,
d0,			r64,
d1,			r65,
d2,			r66,
d3,			r67,
d4,			r68,
d5,			r69,
d6,			r70,
d7,			r71,
d0_lo,		r96,
d0_hi,		r97,
d1_lo,		r98,
d1_hi,		r99,
d2_lo,		r100
d2_hi,		r101,
d3_lo,		r102,
d3_hi,		r103,
d4_lo,		r104,
d4_hi,		r105,
d5_lo,		r106,
d5_hi,		r107,
d6_lo,		r108,
d6_hi,		r109,
d7_lo,		r110,
d7_hi,		r111
s0,			r72,
s1,			r73,
s2,			r74,
s3,			r75,
s4,			r76,
s5,			r77,
s6,			r78,
s7,			r79,
s8,			r80,
s9,			r81,
s10,		r82,
s11,		r83,

// 指令模板
#TEMPLATE
//id,		word,		OPCODE,		T1,		T2,		DST,		RD1,		RD2,	example,
0,			1,			w0 23+9,	w0 22,	w0 21,	w0 14+7,	w0 7+7,		w0 0+7,	add,
1,			2,			w0 23+9,	w0 22,	w0 21,	w0 14+7,	w1 0+32, 	,		lc,
2,			1,			w0 23+9,	,		,		w0 16+7,	w0 0+16, 	,		lcs,
3,			1,			w0 23+9,	,		w0 21,	,			, 			w0 0+21,jmp,
4,			1,			w0 23+9,	,		,		w0 0+21,	,		 	,		hlt,

// 指令
#INSTRUCTION
//template,	name,		dst,	rd1,			rd2,				code,			cost,
// 程序控制	
0,			nop,		,		,       		,					b000000000,		c:2,
0,			cache_clr,	,		,       		,					b000001000,		c:2,
4,			hlt,		num,	,       		,					b000000010,		c:2,
1,			lc,			reg32,	num|var,   		,					b000000100,		c:2,
2,			lcs,		reg32,	num|var,   		,					b000000110,		c:2,
2,			lcss,		reg32,	num|var,   		,					b000000111,		c:2,
3,			jmp,		,		,				reg32|num|var,		b000101000,		c:2,
3,			call,		,		,				reg32|num|var,		b000101001,		c:2,
0,			cjmpe,		reg32,	reg32|num,		reg32|num,			b000111000,		j:2-4,
0,			cjmpne,		reg32,	reg32|num,		reg32|num,			b000110100,		j:2-4,
0,			cjmpsg,		reg32,	reg32|num,		reg32|num,			b000110001,		j:2-4,
0,			cjmpsge,	reg32,	reg32|num,		reg32|num,			b000111001,		j:2-4,
0,			cjmpug,		reg32,	reg32|num,		reg32|num,			b000110010,		j:2-4,
0,			cjmpuge,	reg32,	reg32|num,		reg32|num,			b000111010,		j:2-4,
0,			cjmpeb,		reg32,	reg32,			num,				b000101010,		j:2-4,
0,			cjmpneb,	reg32,	reg32,			num,				b000101011,		j:2-4,
0,			cjmpe64,	reg32,	reg64|num,	    reg64|num,			b000011000,		j:2-4,
0,			cjmpne64,	reg32,	reg64|num,	    reg64|num,			b000010100,		j:2-4,
0,			cjmpsg64,	reg32,	reg64|num,	    reg64|num,			b000010011,		j:2-4,
0,			cjmpsge64,	reg32,	reg64|num,	    reg64|num,			b000011011,		j:2-4,

// DATA_BUS,指令,		读:目标寄存器;写:目标地址,	  读:源地址;写:值,	地址偏移
0,			lm,			reg128,						reg32|num,		reg32|num,			b001100000,		c:2,
0,			sm,			reg32,						reg128,			reg32|num,			b001100010,		c:2,
0,			l64,		reg64,						reg32|num,		reg32|num,			b001011000,		c:2,
0,			s64,		reg32,						reg64,			reg32|num,			b001011010,		c:2,
0,			lw,			reg32,						reg32|num,		reg32|num,			b001000100,		c:2,
0,			sw,			reg32,						reg32|num,		reg32|num,			b001000110,		c:2,
0,			ls,			reg32,						reg32|num,		reg32|num,			b001001001,		c:2,
0,			ss,			reg32,						reg32|num,		reg32|num,			b001001011,		c:2,
0,			lsu,		reg32,						reg32|num,		reg32|num,			b001001000,		c:2,
0,			ssu,		reg32,						reg32|num,		reg32|num,			b001001010,		c:2,
0,			lbyte,		reg32,						reg32|num,		reg32|num,			b001001100,		c:2,
0,			sbyte,		reg32,						reg32|num,		reg32|num,			b001001110,		c:2,
0,			lbytes,		reg32,						reg32|num,		reg32|num,			b001001101,		c:2,
0,			sbytes,		reg32,						reg32|num,		reg32|num,			b001001111,		c:2,
0,			l2b,		reg32,						reg32|num,		reg32|num,			b001010100,		c:2,
0,			s2b,		reg32,						reg32|num,		reg32|num,			b001010110,		c:2,
0,			lbit,		reg32,						reg32|num,		reg32|num,			b001010000,		c:2,
0,			sbit,		reg32,						reg32|num,		reg32|num,			b001010010,		c:2,

// 代数运算
0,			add,		reg32,	reg32|num,		reg32|num,			b101100000,		c:2,
0,			sub,		reg32,	reg32|num,		reg32|num,			b101100001,		c:2,
0,			add64,		reg64,	reg64|num,		reg64|num,	    	b101100100,		c:2,
0,			sub64,		reg64,	reg64|num,		reg64|num,	    	b101100101,		c:2,
0,			abs,		reg32,	reg32|num,		,					b101010000,		c:2,
0,			abs64,		reg64,	reg64,	     	,					b101010100,		c:2,
0,			min,		reg32,	reg32|num,		reg32|num,			b100110001,		c:2,
0,			min64,		reg64,	reg64,		    reg64,	     		b100110101,		c:2,
0,			max,		reg32,	reg32|num,		reg32|num,			b100111001,		c:2,
0,			max64,		reg64,	reg64,		    reg64,		    	b100111101,		c:2,
0,			muls16f,	reg32,	reg32|num,		reg32|num,			b011100010,		c:2,
0,			muls16,		reg32,	reg32|num,		reg32|num,			b011100000,		c:2,
0,			muls32f,	reg32,	reg32|num,		reg32|num,			b011110110,		c:2,
0,			muls32,	    reg32,	reg32|num,		reg32|num,			b011100100,		c:2,
0,			muls32_64,	reg64,	reg32|num,		reg32|num,			b011111010,		c:2,
0,			muls64_32,	reg64,	reg64,			reg32|num,		 	b011110000,		c:2,
0,			muls64_32f,	reg64,	reg64,			reg32|num,		 	b011100110,		c:2,
0,			muls64,		reg64,	reg64,			reg64,		 		b011111100,		c:2,
0,			muls_c,		reg32,	reg32,			reg32,				b011111000,		c:2,
0,			divs32f,	reg32,	reg32|num,		reg32|num,			b010000000,		c:2,
0,			divs32,		reg32,	reg32|num,		reg32|num,			b010000010,		c:2,
0,			divs64,		reg64,	reg64,		    reg64,		    	b011101100,		c:2,
0,			divs64_32,  reg64,	reg64,		    reg32|num,       	b011101010,		c:2,
0,			64to32,		reg32,	reg64,	     	,		       	    b101001010,		c:2,
0,			32to16,		reg32,	reg32|num,	    ,     		       	b101001001,		c:2,
0,			32to64,		reg64,	reg32|num,	    num,		        b101001100,		c:2,
0,			signed,		reg32,	reg32,	        ,		            b101011100,		c:2,

// 复杂算数运算
0,			atk_rls,	reg32,	reg32,			reg32,				b011110010,		c:2,
0,			conj,		reg32,	reg32,          ,                   b010100000,		c:2,
0,			sqrt,		reg32,	reg32|num,		,					b011000000,		c:2,
0,			sqrt_uint,	reg32,	reg32|num,		,					b011010110,		c:2,
0,			exp2_frac32,reg32,	reg32|num,		,					b011010010,		c:2,
0,			exp2_m16p16,reg32,	reg32|num,		,					b011000010,		c:2,
0,			log2_m16p16,reg32,	reg32|num,		,					b011010100,		c:2,
0,			log2_frac32,reg32,	reg32|num,		,					b011000100,		c:2,
0,			sin,		reg32,	reg32|num,		,					b011000110,		c:2,
0,			cos,		reg32,	reg32|num,		,					b011001000,		c:2,
0,			add_c,		reg32,	reg32,			reg32,				b010101010,		c:2,
0,			sub_c,		reg32,	reg32,			reg32,				b010101100,		c:2,

// 位运算
0,			and,		reg32,	reg32|num,		reg32|num,			b101000011,		c:2,
0,			and64,		reg64,	reg64,	    	reg64,		    	b101000111,		c:2,
0,			or,			reg32,	reg32|num,		reg32|num,			b101000010,		c:2,
0,			or64,	    reg64,	reg64,		    reg64,		     	b101000110,		c:2,
0,			xor,		reg32,	reg32|num,		reg32|num,			b101000000,		c:2,
0,			xor64,		reg64,	reg64,		    reg64,	    		b101000100,		c:2,
0,			sl,			reg32,	reg32|num,		reg32|num,			b100001000,		c:2,
0,			slp,		reg32,	reg32|num,		reg32|num,			b100001001,		c:2,
0,			sru,		reg32,	reg32|num,		reg32|num,			b100001010,		c:2,
0,			srs,		reg32,	reg32|num,		reg32|num,			b100001011,		c:2,
0,			slc,		reg32,	reg32|num,		reg32|num,			b011001100,		c:2,
0,			src,		reg32,	reg32|num,		reg32|num,			b011001110,		c:2,
0,			sl64,		reg64,	reg64,		    reg32|num,			b100001100,		c:2,
0,			srs64,		reg64,	reg64,		    reg32|num,			b100001101,		c:2,
0,			sl32,		reg64,	reg32|num,	    reg32|num,			b100001111,		c:2,
0,			bit_set,	reg32,	reg32,			num,				b100100000,		c:2,
0,			bit_clr,	reg32,	reg32,			num,				b100100010,		c:2
0,			byte_match,		 ,	reg128,		    num,			    b100000100,		c:2,
0,			bm_clear,	     ,	      ,		       ,			    b100000101,		c:2,
0,			bm_reset,	     ,	      ,		       ,			    b100000111,		c:2,
0,			bm_update,	     ,	      ,		       ,			    b100000110,		c:2,

// SIMD
0,			simd_sample,reg128,	reg128,			num,				b110000000,		c:2,
// simd_sl, 128bit的数据整体左移n个8bit                             
0,			simd_sl,	reg128,	reg128,			reg32|num,			b111000000,		c:2,
0,			simd_xor,	reg128,	reg128,			reg128,				b110100000,		c:2,
0,			simd_match,	reg32,	reg128,			reg128,				b111100000,		c:2,
0,			simd_and,	reg128,	reg128,			reg128,				b110010000,		c:2,
0,			simd_or,	reg128,	reg128,			reg128,				b111010000,		c:2,
// simd_set,设置128bit寄存器的低n个字节为ff,其余高字节为0           
0,			simd_set,	reg128,	num,			,					b110110000,		c:2,
0,			simd_2bit_to_1bit,  reg128, reg128,	reg128,				b111110000,		c:2,
0,			simd_mul,	reg128,	reg128,			reg128,				b110001000,		c:2,
0,			simd_muladd,reg32,	reg128,			reg128,				b111001000,		c:2,
0,			simd_1bit_to_2bit,  reg128, reg64,	,	     			b110101000,		c:2,

#SPECIAL-INSTRUCTION-TEMPLATE
//ID,		word,		code,	   flag,	  adr_in1,	 in1_mode, num,		   adr_in2,	  cmd_mode,  in1_type,  in2_en,  in2_mode, in2_type,  out_type, out_adr
0,			3,			w0 23+9 u, w0 20+3 u, w0 0+20 u, w1 31 u,  w1 20+11 u, w1 0+20 u, w2 27+5 u, w2 25+2 u, w2 24 u, w2 23 u,  w2 21+2 u, w2 20 u,  w2 0+20 u


#SPECIAL-INSTRUCTION
//template,	name,			code,
0, 			v_abs,			b010000101,
0, 			v_add,			b010110001, 
0, 			v_add_c,		b010101011,
0, 			v_conj,			b010100001,
0, 			v_copy,			b010000011,
0, 			v_correlat,		b011100111,
0, 			v_correlat_c,	b011111011,
0, 			v_cos,			b011001001,
0, 			v_energy,		b011110001,
0, 			v_exp2_m16p16,	b011000011,
0, 			v_fft,			b010010011,
0, 			v_fir,			b011100101,
0, 			v_fir_c,		b011101101,
0, 			v_gain,			b011110011,
0, 			v_ifft,			b010010111,
0, 			v_iir,			b011101001,
0, 			v_iir_c,		b011101011,
0, 			v_log2_m16p16,	b011000101,
0, 			v_mat,			b011100001,
0, 			v_mat_c,	    b011111111,
0, 			v_mat_t,		b010001101,
0, 			v_max,			b010101001,
0,			v_mfft,			b010010001,
0,			v_mifft,		b010010101,
0, 			v_min,			b010100111,
0, 			v_mix,			b010101111,
0, 			v_muls,			b011100011,
0, 			v_muls32,		b011110111,
0, 			v_muls_c,		b011111001,
0, 			v_muls_conj,	b011111101,
0, 			v_polarrect,	b010000111,
0, 			v_rectpolar,	b010001001,
0, 			v_sqrt,			b011000001,
0, 			v_sin,			b011000111,
0, 			v_slp,			b011001011,
0, 			v_slc,			b011001101,
0, 			v_src,			b011001111,
0, 			v_sub,			b010110011,
0, 			v_sub_c,		b010101101,
0, 			v_mul32_c,		b011101111,
0, 			v_mat32_c,		b011110101,
0, 			v_divs,		    b011010001,
0, 			v_divs_p16,	    b011010011,
0, 			v_divs_p31,	    b011010101,

// 指令别名
#INSTRUCTION-ALIAS
// usage,				inst-1,					inst-2,				inst-3,				inst-4,				inst-5,				inst-6,				inst-7,
lcsu a b,				lcs a b,				,					,					,					,					,					,
cjmpul a b c,			cjmpug a c b,			,					,					,					,					,					,
cjmpule a b c,			cjmpuge a c b,			,					,					,					,					,					,
cjmpsl a b c,			cjmpsg a c b,			,					,					,					,					,					,
cjmpsle a b c,			cjmpsge a c b,			,					,					,					,					,					,
cjmpsl64 a b c,			cjmpsg64 a c b,			,					,					,					,					,					,
cjmpsle64 a b c,		cjmpsge64 a c b,		,					,					,					,					,					,
hlt,					hlt 0,					,					,					,					,					,					,
mov a b,				add a b 0,				,					,					,					,					,					,
neg dst rd2,			sub dst 0 rd2,			,					,					,					,					,					,
not dst rd1,			xor dst rd1 -1,			,					,					,					,					,					,
ret,					jmp rp,					,					,					,					,					,					,
inc dst rd2,			add dst dst rd2,		,					,					,					,					,					,
iret,					jmp irp,				,					,					,					,					,					,
jmp var,				lcs rv var,				jmp rv,				,					,					,					,					,
call var,				lcs rv var,				call rv,			,					,					,					,					,
lv reg var,				lcs rv var,				lw reg rv 0,		,					,					,					,					,
sv var reg,				lcs rv var,				sw rv reg 0,		,					,					,					,					,
sv dst src,				lcs rv dst,				lcs rj src,			sw rv rj 0,			,					,					,					,
jmp var,				lc rv var,				jmp rv,				,					,					,					,					,
call var,				lc rv var,				call rv,			,					,					,					,					,
lv reg var,				lc rv var,				lw reg rv 0,		,					,					,					,					,
sv var reg,				lc rv var,				sw rv reg 0,		,					,					,					,					,
sv dst src,				lc rv dst,				lc rj src,			sw rv rj 0,			,					,					,					,
// lcs编译失败的话 自动适配lc
lcs dst src,			lc dst src,				,					,					,					,					,					,

lm a b,					lm a b 0,				,					,					,					,					,					,
sm a b,					sm a b 0,				,					,					,					,					,					,
l64 a b,				l64 a b 0,				,					,					,					,					,					,
s64 a b,			    s64 a b 0,				,					,					,					,					,					,
lw a b,					lw a b 0,				,					,					,					,					,					,
sw a b,					sw a b 0,				,					,					,					,					,					,
ls a b,					ls a b 0,				,					,					,					,					,					,
ss a b,					ss a b 0,				,					,					,					,					,					,
lbyte a b,				lbyte a b 0,			,					,					,					,					,					,
sbyte a b,				sbyte a b 0,			,					,					,					,					,					,
lbit a b,				lbit a b 0,				,					,					,					,					,					,
sbit a b,				sbit a b 0,				,					,					,					,					,					,
lps a b,				ls a b 0,				,					,					,					,					,					,
sps a b,				ss a b 0,				,					,					,					,					,					,
l2b a b,				l2b a b 0,				,					,					,					,					,					,
s2b a b,				s2b a b 0,				,					,					,					,					,					,
lpw reg addr,			lc rv addr,				lw reg rv 0,		,					,					,					,					,
spw addr reg,			lc rv addr,				sw rv reg 0,		,					,					,					,					,
spw addr value,			lc rv addr,				lc rj value,		sw rv rj 0,			,					,					,					,
spw a b,				sw a b 0,				,					,					,					,					,					,          
sps a b,				ss a b 0,				,					,					,					,					,					,
lpw a b,				lw a b 0,				,					,					,					,					,					,
lps a b,				ls a b 0,				,					,					,					,					,					,

ssu a b,				ssu a b 0,				,					,					,					,					,					,
lsu a b,				lsu a b 0,				,					,					,					,					,					,

// 向量运算的固定参数 参照<U31芯片指令和向量运算.docx>
v_copy 		k a b c d e f,			v_copy 		 k a 1 b 0 c d 0 0 0 e f,	,		,		,					,					,					,
v_abs 		k a b c d e f,			v_abs 		 k a 1 b 0 c d 0 0 0 e f,	,		,		,					,					,					,
v_mix 		k a b c d,				v_mix 		 k a 1 b c 1 2 1 1 2 1 d,	,		,		,					,					,					,
v_energy 	k a b c d,			    v_energy 	 k a 1 b 0 c 2 0 0 0 1 d,	,		,		,					,					,					,
v_fir 		k a b c d e f,			v_fir 		 k a 1 b c 8 d 1 1 1 e f,	,		,		,					,					,					,
v_fir_c		k a b c d e f,			v_fir_c		 k a 1 b c 8 d 1 1 1 e f,	,		,		,					,					,					,
v_iir 		k a b c d e f g,		v_iir 		 k a 1 b c 8 d 1 1 e f g,	,		,		,					,					,					,
v_iir_c		k a b c d e f g,		v_iir_c		 k a 1 b c 8 d 1 1 e f g,	,		,		,					,					,					,
v_correlat	k a b c d e f g,		v_correlat 	 k a 1 b c 8 d 1 1 e f g,	,		,		,					,					,					,
v_correlat_c k a b c d e f g,		v_correlat_c k a 1 b c 8 d 1 1 e f g,	,		,		,					,					,					,
v_conj 		k a b c,			    v_conj 		 k a 1 b 0 1 2 0 0 2 1 c,	,		,		,					,					,					,
v_add_c		k a s b c d e f,		v_add_c		 k a s b c d 2 1 e 2 1 f,	,		,		,					,					,					,
v_sub_c		k a s b c d e f,		v_sub_c		 k a s b c d 2 1 e 2 1 f,	,		,		,					,					,					,
v_add 		k a s b c d e f g h i,	v_add  		 k a s b c d e 1 f g h i,	,		,		,					,					,					,
v_sub 		k a s b c d e f g h i,	v_sub  		 k a s b c d e 1 f g h i,	,		,		,					,					,					,
v_max 		k a s b c d e f g h,	v_max  		 k a s b c 1 d 1 e f g h,	,		,		,					,					,					,
v_min 		k a s b c d e f g h,	v_min  		 k a s b c 1 d 1 e f g h,	,		,		,					,					,					,
v_sqrt 		k a b c d e,			v_sqrt 		 k a 1 b 0 1 c 0 0 0 d e,	,		,		,					,					,					,
v_exp2_m16p16 k a b c d e,		 v_exp2_m16p16 	 k a 1 b 0 1 c 0 0 0 d e,	,		,		,					,					,					,
v_log2_m16p16 k a b c d e,		 v_log2_m16p16	 k a 1 b 0 1 c 0 0 0 d e,	,		,		,					,					,					,
v_sin 		k a b c d e,			v_sin 		 k a 1 b 0 1 c 0 0 0 d e,	,		,		,					,					,					,
v_cos 		k a b c d e,			v_cos 		 k a 1 b 0 1 c 0 0 0 d e,	,		,		,					,					,					,
v_fft 		k a b c d e f,			v_fft  		 k a 1 b c d e 1 1 1 1 f,	,		,		,					,					,					,
v_ifft  	k a b c d e,    		v_ifft 		 k a 1 b c d 2 1 1 1 1 e,	,		,		,					,					,					,
v_gain		k a b c d e,		    v_gain		 k a 1 b c 1 2 1 d 1 1 e,	,		,		,					,					,					,
v_polarrect	k a b c,				v_polarrect  k a 1 b 0 1 2 0 0 0 1 c,	,		,		,					,					,					,
v_rectpolar	k a b c,				v_rectpolar  k a 1 b 0 1 2 0 0 0 1 c,	,		,		,					,					,					,
v_mat_t	    k a b c d e,			v_mat_t      k a 1 0 b 1 0 1 1 c d e,	,		,		,					,					,					,
v_mat_r     k a b c d e f g h,		v_mat		 k a 1 b c d e 1 1 f g h,	,		,		,					,					,					,
v_mat_c     k a b c d e,            v_mat_c      k a 1 b c d 2 1 1 2 1 e,	,		,		,					,					,					, 
v_muls_16f  k a b c d e f g,   		v_muls		 k a 1 b c d 1 1 e 1 f g,	,		,		,					,					,					,
v_muls_32f  k a b c d e f g,	    v_muls32	 k a 1 b c d 2 1 e 2 f g,	,		,		,					,					,					,
v_muls_c    k a b c d e f g,	    v_muls_c	 k a 1 b c d 2 1 e 2 f g,	,		,		,					,					,					,
v_muls_conj k a b c d e f g,	   	v_muls_conj	 k a 1 b c d 2 1 e 2 f g,	,		,		,					,					,					,
v_slp 		k a b c d e f g h,		v_slp  		 k a 1 b c 1 d 1 e f g h,	,		,		,					,					,					,
v_slc 		k a b c d e f,		    v_slc  		 k a 1 b c 1 2 1 d e 1 f,	,		,		,					,					,					,
v_src 		k a b c d e f,		    v_src  		 k a 1 b c 1 2 1 d e 1 f,	,		,		,					,					,					,
v_mfft  	k a b c d e,    		v_mfft 		 k a 1 b 0 c d 0 0 0 1 e,	,		,		,					,					,					,      
v_mifft  	k a b c d e f,    		v_mifft 	 k a 1 b c d e 0 0 0 1 f,	,		,		,					,					,					,      
v_mul32_c   k a b c d e f g,	    v_mul32_c	 k a 1 b c d 3 1 e 2 f g,	,		,		,					,					,					,
v_mat32_c   k a b c d e f g,        v_mat32_c    k a 1 b c d e 1 1 f 1 g,	,		,		,					,					,					, 
v_divs      k a b c d e f g h,      v_divs       k a b c d 1 e 1 f g 1 h,	,		,		,					,					,					, 
v_divs_p16  k a b c d e f g h,      v_divs_p16   k a b c d 1 e 1 f g 1 h,	,		,		,					,					,					, 
v_divs_p31  k a b c d e f g h,      v_divs_p31   k a b c d 1 e 1 f g 1 h,	,		,		,					,					,					, 

// 调试器配置
#DEBUGER-CONFIG
// name,				value,
I2C_ADDR_BYTE,			0x58,
CPU_REG_BASE_ADDR,		0x09010000,
BREAK_POINT_SN,			0x00800000,
STS_REG_DBG_ADDR,		0x0901ff1c,
CURRENT_IP,				0x0901ff00,
CTL_REG_DBG_ADDR,		0x0901ff0c,
CTL_REG_STEP_ADDR,		0x0901ff14,
HALT_CMD_ADDR,			0x0901ff04,
UNHALT_CMD_ADDR,		0x0901ff08,
CTL_REG_RFRSH_ADDR,		0x0901ff20,
CTL_REG_CONT_ADDR,		0x0901ff18,
IIC_ENDIAN,				little,